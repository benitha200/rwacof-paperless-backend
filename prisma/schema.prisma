generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  firstName      String
  lastName       String?
  role           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shipments      Shipment[]
  preparedGRNs   GRN[] @relation("PreparedBy")
  checkedGRNs    GRN[] @relation("CheckedBy")
  authorizedGRNs GRN[] @relation("AuthorizedBy")
  receivedGRNs   GRN[] @relation("ReceivedBy")
  employee       Employee?
}

model Employee {
  id                    Int       @id @default(autoincrement())
  userId                Int       @unique
  employeeNumber        String    @unique
  department            String
  designation           String
  dateOfBirth           DateTime?
  gender                String?
  phoneNumber           String?
  address               String?
  joinDate              DateTime?
  salaryGrade           String?
  emergencyContactName  String?
  emergencyContactPhone String?
  bankAccountNumber     String?
  panNumber             String?
  status                String    @default("ACTIVE")
  
  reportsToId           Int?
  reportsTo             Employee?  @relation("ManagerToReports", fields: [reportsToId], references: [id])
  directReports         Employee[] @relation("ManagerToReports")
  
  user                  User      @relation(fields: [userId], references: [id])
  tripRequests          TripRequest[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model TripRequest {
  id              Int       @id @default(autoincrement())
  employeeId      Int
  reason          String
  itinerary       String
  vehiclePlate    String?
  departureDate   DateTime
  returnDate      DateTime
  kmAtDeparture   Int
  kmAtArrival     Int?
  status          String    @default("PENDING")
  supervisorApproval Boolean @default(false)
  adminApproval    Boolean @default(false)
  
  employee        Employee @relation(fields: [employeeId], references: [id])
  car             Car?     @relation(fields: [carId], references: [id])
  carId           Int?
  driver          Driver?  @relation(fields: [driverId], references: [id])
  driverId        Int?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Car {
  id           Int       @id @default(autoincrement())
  make         String
  model        String
  licensePlate String    @unique
  year         Int
  mileage      Int
  status       String    @default("AVAILABLE")

  driver       Driver?   @relation("CarDriver") // Removed fields and references
  tripRequests TripRequest[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Driver {
  id            Int       @id @default(autoincrement())
  //employeeId    Int       @unique
  firstName     String
  lastName      String
  licenseNumber String    @unique
  phoneNumber   String
  address       String
  status        String    @default("ACTIVE")

  carId         Int?      @unique
  car           Car?      @relation("CarDriver", fields: [carId], references: [id]) // Only Driver specifies fields and references

  tripRequests  TripRequest[]

  //employee      Employee  @relation(fields: [employeeId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}



model Contract {
  id              Int       @id @default(autoincrement())
  contractNumber  String    @unique
  clientName      String
  startDate       DateTime
  endDate         DateTime
  totalQuantity   Int
  quantityUnit    String
  price           Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  terms           String    @db.Text
  status          String    @default("ACTIVE")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  shipments       Shipment[]
}

model Shipment {
  id                Int      @id @default(autoincrement())
  containerNo       String
  truckNo           String
  lotNo             String?
  description       String   @db.Text
  quantity          Int?
  quantityUnit      String?
  netWeight         Decimal?  @db.Decimal(10, 2)
  netWeightUnit     String?
  amount            Decimal?  @db.Decimal(10, 2)
  price             Decimal?  @db.Decimal(10, 2)
  consignee         String?
  date              DateTime @default(now())
  status            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  forwarder         String   @default("MSK")
  contractId        Int
  user              User     @relation(fields: [userId], references: [id])
  contract          Contract @relation(fields: [contractId], references: [id])
  loadingTallySheet LoadingTallySheet?
  invoice           Invoice?
  vgm               VGM?
  stuffingReport    StuffingReport?
}



model LoadingTallySheet {
  id           Int      @id @default(autoincrement())
  shipmentId   Int      @unique
  loadingDay   DateTime
  sl           String
  forwarder    String
  rssSsrwSprw  String
  plateNo      String
  tare         Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shipment     Shipment @relation(fields: [shipmentId], references: [id])
}

model Invoice {
  id                 Int      @id @default(autoincrement())
  shipmentId         Int      @unique
  seller             String
  sellerAddress      String   @db.Text
  consignee          String
  consigneeAddress   String   @db.Text
  billOfLadingNo     String
  authorizedSignature String
  InvoiceDate        DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  shipment           Shipment @relation(fields: [shipmentId], references: [id])
}

model VGM {
  id               Int      @id @default(autoincrement())
  shipmentId       Int      @unique
  bookingBlNumber  String
  containerNumber  String   
  containerTypeSize String
  vgmKgs           Decimal  @db.Decimal(10, 2)
  cargoGwKgs       Decimal  @db.Decimal(10, 2)
  method           String
  remarks          String?  @db.Text
  vesselName       String
  voyageNumber     String
  authorizedPerson String
  position         String
  contactNumber    String
  signatureDate    DateTime
  kmaApprovalNo    String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shipment         Shipment @relation(fields: [shipmentId], references: [id])
  containers       Container[]
}

model StuffingReport {
  id               Int      @id @default(autoincrement())
  shipmentId       Int      @unique
  client           String
  mandate          String   @db.Text
  product          String
  numberOfBags     Int
  packing          String
  vesselName       String
  billOfLadingNo   String
  place            String
  container        String
  stuffingStart    DateTime
  stuffingEnd      DateTime
  tempSealTime     DateTime
  finalSealTime    DateTime
  containerCondition String  @db.Text
  lots             String
  illyId           String
  authorizedPerson String
  signatureDate    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shipment         Shipment @relation(fields: [shipmentId], references: [id])

  image1             String?
  image2             String?
  image3             String?
  image4             String?
  image5             String?
  image6             String?
  image7             String?
  image8             String?
}

model Container {
  id               Int      @id @default(autoincrement())
  vgmId            Int
  containerNumber  String
  containerTypeSize String
  vgmKgs           Decimal  @db.Decimal(10, 2)
  cargoGwKgs       Decimal  @db.Decimal(10, 2)
  method           String
  remarks          String?  @db.Text
  vgm              VGM      @relation(fields: [vgmId], references: [id])
}




model GRN {
  id              Int      @id @default(autoincrement())
  receivedDate    DateTime
  supplierName    String
  supplierAddress String
  plate_no        String
  wbridgeRef      String
  moisture        Float
  parch           Float?
  coffee_type     String
  bags            Int
  quantity        Int
  quantityUnit    String
  totalWeight     Float
  weightUnit      String
  lessNoOfBags    Int
  subGrossKg      Int
  lessMoistureKg  Int
  lessQualityKg   Int
  netWeightKg     Int
  cheque_in_favor_of String
  payment_weight  String
  payment_quantity Int
  payment_rate    Int
  payment_amount  Int
  paymentDate     DateTime
  drAc            Int?
  qualityGrade    String
  rate            Int
  remarks         String?
  status          String
  currentStep     Int
  preparedById    Int
  preparedBy      User     @relation("PreparedBy", fields: [preparedById], references: [id])
  checkedById     Int?
  checkedBy       User?    @relation("CheckedBy", fields: [checkedById], references: [id])
  authorizedById  Int?
  authorizedBy    User?    @relation("AuthorizedBy", fields: [authorizedById], references: [id])
  receivedById    Int?
  receivedBy      User?    @relation("ReceivedBy", fields: [receivedById], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}